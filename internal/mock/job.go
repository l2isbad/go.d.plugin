// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/l2isbad/go.d.plugin/internal/godplugin/job (interfaces: Job)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockJob is a mock of Job interface
type MockJob struct {
	ctrl     *gomock.Controller
	recorder *MockJobMockRecorder
}

// MockJobMockRecorder is the mock recorder for MockJob
type MockJobMockRecorder struct {
	mock *MockJob
}

// NewMockJob creates a new mock instance
func NewMockJob(ctrl *gomock.Controller) *MockJob {
	mock := &MockJob{ctrl: ctrl}
	mock.recorder = &MockJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJob) EXPECT() *MockJobMockRecorder {
	return m.recorder
}

// AutoDetectionRetry mocks base method
func (m *MockJob) AutoDetectionRetry() int {
	ret := m.ctrl.Call(m, "AutoDetectionRetry")
	ret0, _ := ret[0].(int)
	return ret0
}

// AutoDetectionRetry indicates an expected call of AutoDetectionRetry
func (mr *MockJobMockRecorder) AutoDetectionRetry() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoDetectionRetry", reflect.TypeOf((*MockJob)(nil).AutoDetectionRetry))
}

// Check mocks base method
func (m *MockJob) Check() bool {
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Check indicates an expected call of Check
func (mr *MockJobMockRecorder) Check() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockJob)(nil).Check))
}

// FullName mocks base method
func (m *MockJob) FullName() string {
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName
func (mr *MockJobMockRecorder) FullName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockJob)(nil).FullName))
}

// Init mocks base method
func (m *MockJob) Init() error {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockJobMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockJob)(nil).Init))
}

// JobName mocks base method
func (m *MockJob) JobName() string {
	ret := m.ctrl.Call(m, "JobName")
	ret0, _ := ret[0].(string)
	return ret0
}

// JobName indicates an expected call of JobName
func (mr *MockJobMockRecorder) JobName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobName", reflect.TypeOf((*MockJob)(nil).JobName))
}

// MainLoop mocks base method
func (m *MockJob) MainLoop() {
	m.ctrl.Call(m, "MainLoop")
}

// MainLoop indicates an expected call of MainLoop
func (mr *MockJobMockRecorder) MainLoop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MainLoop", reflect.TypeOf((*MockJob)(nil).MainLoop))
}

// ModuleName mocks base method
func (m *MockJob) ModuleName() string {
	ret := m.ctrl.Call(m, "ModuleName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModuleName indicates an expected call of ModuleName
func (mr *MockJobMockRecorder) ModuleName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleName", reflect.TypeOf((*MockJob)(nil).ModuleName))
}

// PostCheck mocks base method
func (m *MockJob) PostCheck() bool {
	ret := m.ctrl.Call(m, "PostCheck")
	ret0, _ := ret[0].(bool)
	return ret0
}

// PostCheck indicates an expected call of PostCheck
func (mr *MockJobMockRecorder) PostCheck() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCheck", reflect.TypeOf((*MockJob)(nil).PostCheck))
}

// Shutdown mocks base method
func (m *MockJob) Shutdown() {
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockJobMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockJob)(nil).Shutdown))
}

// String mocks base method
func (m *MockJob) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockJobMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockJob)(nil).String))
}

// Tick mocks base method
func (m *MockJob) Tick(arg0 int) {
	m.ctrl.Call(m, "Tick", arg0)
}

// Tick indicates an expected call of Tick
func (mr *MockJobMockRecorder) Tick(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tick", reflect.TypeOf((*MockJob)(nil).Tick), arg0)
}
