// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/l2isbad/go.d.plugin/internal/modules (interfaces: Module)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	charts "github.com/l2isbad/go.d.plugin/internal/pkg/charts"
	logger "github.com/l2isbad/go.d.plugin/internal/pkg/logger"
	reflect "reflect"
)

// MockModule is a mock of Module interface
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
}

// MockModuleMockRecorder is the mock recorder for MockModule
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// Check mocks base method
func (m *MockModule) Check() bool {
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Check indicates an expected call of Check
func (mr *MockModuleMockRecorder) Check() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockModule)(nil).Check))
}

// GetCharts mocks base method
func (m *MockModule) GetCharts() *charts.Charts {
	ret := m.ctrl.Call(m, "GetCharts")
	ret0, _ := ret[0].(*charts.Charts)
	return ret0
}

// GetCharts indicates an expected call of GetCharts
func (mr *MockModuleMockRecorder) GetCharts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharts", reflect.TypeOf((*MockModule)(nil).GetCharts))
}

// GetData mocks base method
func (m *MockModule) GetData() map[string]int64 {
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// GetData indicates an expected call of GetData
func (mr *MockModuleMockRecorder) GetData() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockModule)(nil).GetData))
}

// Init mocks base method
func (m *MockModule) Init() error {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockModuleMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockModule)(nil).Init))
}

// ModuleName mocks base method
func (m *MockModule) ModuleName() string {
	ret := m.ctrl.Call(m, "ModuleName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModuleName indicates an expected call of ModuleName
func (mr *MockModuleMockRecorder) ModuleName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleName", reflect.TypeOf((*MockModule)(nil).ModuleName))
}

// SetLogger mocks base method
func (m *MockModule) SetLogger(arg0 *logger.Logger) {
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger
func (mr *MockModuleMockRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockModule)(nil).SetLogger), arg0)
}

// SetModuleName mocks base method
func (m *MockModule) SetModuleName(arg0 string) {
	m.ctrl.Call(m, "SetModuleName", arg0)
}

// SetModuleName indicates an expected call of SetModuleName
func (mr *MockModuleMockRecorder) SetModuleName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModuleName", reflect.TypeOf((*MockModule)(nil).SetModuleName), arg0)
}

// SetUpdateEvery mocks base method
func (m *MockModule) SetUpdateEvery(arg0 int) {
	m.ctrl.Call(m, "SetUpdateEvery", arg0)
}

// SetUpdateEvery indicates an expected call of SetUpdateEvery
func (mr *MockModuleMockRecorder) SetUpdateEvery(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdateEvery", reflect.TypeOf((*MockModule)(nil).SetUpdateEvery), arg0)
}

// UpdateEvery mocks base method
func (m *MockModule) UpdateEvery() int {
	ret := m.ctrl.Call(m, "UpdateEvery")
	ret0, _ := ret[0].(int)
	return ret0
}

// UpdateEvery indicates an expected call of UpdateEvery
func (mr *MockModuleMockRecorder) UpdateEvery() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvery", reflect.TypeOf((*MockModule)(nil).UpdateEvery))
}
