// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package kubernetes

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes(in *jlexer.Lexer, out *VolumeStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "pvcRef":
			if in.IsNull() {
				in.Skip()
				out.PVCRef = nil
			} else {
				if out.PVCRef == nil {
					out.PVCRef = new(PVCReference)
				}
				(*out.PVCRef).UnmarshalEasyJSON(in)
			}
		case "availableBytes":
			if in.IsNull() {
				in.Skip()
				out.AvailableBytes = nil
			} else {
				if out.AvailableBytes == nil {
					out.AvailableBytes = new(int64)
				}
				*out.AvailableBytes = int64(in.Int64())
			}
		case "capacityBytes":
			if in.IsNull() {
				in.Skip()
				out.CapacityBytes = nil
			} else {
				if out.CapacityBytes == nil {
					out.CapacityBytes = new(int64)
				}
				*out.CapacityBytes = int64(in.Int64())
			}
		case "usedBytes":
			if in.IsNull() {
				in.Skip()
				out.UsedBytes = nil
			} else {
				if out.UsedBytes == nil {
					out.UsedBytes = new(int64)
				}
				*out.UsedBytes = int64(in.Int64())
			}
		case "inodesFree":
			if in.IsNull() {
				in.Skip()
				out.InodesFree = nil
			} else {
				if out.InodesFree == nil {
					out.InodesFree = new(int64)
				}
				*out.InodesFree = int64(in.Int64())
			}
		case "inodes":
			if in.IsNull() {
				in.Skip()
				out.Inodes = nil
			} else {
				if out.Inodes == nil {
					out.Inodes = new(int64)
				}
				*out.Inodes = int64(in.Int64())
			}
		case "inodesUsed":
			if in.IsNull() {
				in.Skip()
				out.InodesUsed = nil
			} else {
				if out.InodesUsed == nil {
					out.InodesUsed = new(int64)
				}
				*out.InodesUsed = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes(out *jwriter.Writer, in VolumeStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"pvcRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PVCRef == nil {
			out.RawString("null")
		} else {
			(*in.PVCRef).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"availableBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AvailableBytes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.AvailableBytes))
		}
	}
	{
		const prefix string = ",\"capacityBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CapacityBytes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.CapacityBytes))
		}
	}
	{
		const prefix string = ",\"usedBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UsedBytes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.UsedBytes))
		}
	}
	{
		const prefix string = ",\"inodesFree\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.InodesFree == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.InodesFree))
		}
	}
	{
		const prefix string = ",\"inodes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Inodes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.Inodes))
		}
	}
	{
		const prefix string = ",\"inodesUsed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.InodesUsed == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.InodesUsed))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VolumeStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VolumeStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VolumeStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VolumeStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes(l, v)
}
func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes1(in *jlexer.Lexer, out *Summary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "node":
			(out.Node).UnmarshalEasyJSON(in)
		case "pods":
			if in.IsNull() {
				in.Skip()
				out.Pods = nil
			} else {
				in.Delim('[')
				if out.Pods == nil {
					if !in.IsDelim(']') {
						out.Pods = make([]PodStats, 0, 1)
					} else {
						out.Pods = []PodStats{}
					}
				} else {
					out.Pods = (out.Pods)[:0]
				}
				for !in.IsDelim(']') {
					var v1 PodStats
					(v1).UnmarshalEasyJSON(in)
					out.Pods = append(out.Pods, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes1(out *jwriter.Writer, in Summary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"node\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Node).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"pods\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Pods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Pods {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Summary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Summary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Summary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Summary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes1(l, v)
}
func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes2(in *jlexer.Lexer, out *RuntimeStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "imageFs":
			if in.IsNull() {
				in.Skip()
				out.ImageFs = nil
			} else {
				if out.ImageFs == nil {
					out.ImageFs = new(FsStats)
				}
				(*out.ImageFs).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes2(out *jwriter.Writer, in RuntimeStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"imageFs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ImageFs == nil {
			out.RawString("null")
		} else {
			(*in.ImageFs).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RuntimeStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RuntimeStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RuntimeStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RuntimeStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes2(l, v)
}
func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes3(in *jlexer.Lexer, out *RlimitStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "maxpid":
			if in.IsNull() {
				in.Skip()
				out.MaxPID = nil
			} else {
				if out.MaxPID == nil {
					out.MaxPID = new(int64)
				}
				*out.MaxPID = int64(in.Int64())
			}
		case "curproc":
			if in.IsNull() {
				in.Skip()
				out.NumOfRunningProcesses = nil
			} else {
				if out.NumOfRunningProcesses == nil {
					out.NumOfRunningProcesses = new(int64)
				}
				*out.NumOfRunningProcesses = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes3(out *jwriter.Writer, in RlimitStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"maxpid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MaxPID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.MaxPID))
		}
	}
	{
		const prefix string = ",\"curproc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.NumOfRunningProcesses == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.NumOfRunningProcesses))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RlimitStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RlimitStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RlimitStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RlimitStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes3(l, v)
}
func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes4(in *jlexer.Lexer, out *PodStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "podRef":
			(out.PodRef).UnmarshalEasyJSON(in)
		case "containers":
			if in.IsNull() {
				in.Skip()
				out.Containers = nil
			} else {
				in.Delim('[')
				if out.Containers == nil {
					if !in.IsDelim(']') {
						out.Containers = make([]ContainerStats, 0, 1)
					} else {
						out.Containers = []ContainerStats{}
					}
				} else {
					out.Containers = (out.Containers)[:0]
				}
				for !in.IsDelim(']') {
					var v4 ContainerStats
					(v4).UnmarshalEasyJSON(in)
					out.Containers = append(out.Containers, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cpu":
			if in.IsNull() {
				in.Skip()
				out.CPU = nil
			} else {
				if out.CPU == nil {
					out.CPU = new(CPUStats)
				}
				(*out.CPU).UnmarshalEasyJSON(in)
			}
		case "memory":
			if in.IsNull() {
				in.Skip()
				out.Memory = nil
			} else {
				if out.Memory == nil {
					out.Memory = new(MemoryStats)
				}
				(*out.Memory).UnmarshalEasyJSON(in)
			}
		case "network":
			if in.IsNull() {
				in.Skip()
				out.Network = nil
			} else {
				if out.Network == nil {
					out.Network = new(NetworkStats)
				}
				(*out.Network).UnmarshalEasyJSON(in)
			}
		case "volume":
			if in.IsNull() {
				in.Skip()
				out.VolumeStats = nil
			} else {
				in.Delim('[')
				if out.VolumeStats == nil {
					if !in.IsDelim(']') {
						out.VolumeStats = make([]VolumeStats, 0, 1)
					} else {
						out.VolumeStats = []VolumeStats{}
					}
				} else {
					out.VolumeStats = (out.VolumeStats)[:0]
				}
				for !in.IsDelim(']') {
					var v5 VolumeStats
					(v5).UnmarshalEasyJSON(in)
					out.VolumeStats = append(out.VolumeStats, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ephemeral-storage":
			if in.IsNull() {
				in.Skip()
				out.EphemeralStorage = nil
			} else {
				if out.EphemeralStorage == nil {
					out.EphemeralStorage = new(FsStats)
				}
				(*out.EphemeralStorage).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes4(out *jwriter.Writer, in PodStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"podRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.PodRef).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"containers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Containers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Containers {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cpu\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CPU == nil {
			out.RawString("null")
		} else {
			(*in.CPU).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"memory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Memory == nil {
			out.RawString("null")
		} else {
			(*in.Memory).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"network\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Network == nil {
			out.RawString("null")
		} else {
			(*in.Network).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.VolumeStats == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.VolumeStats {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ephemeral-storage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.EphemeralStorage == nil {
			out.RawString("null")
		} else {
			(*in.EphemeralStorage).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PodStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PodStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PodStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PodStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes4(l, v)
}
func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes5(in *jlexer.Lexer, out *PodReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		case "uid":
			out.UID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes5(out *jwriter.Writer, in PodReference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"namespace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Namespace))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PodReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PodReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PodReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PodReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes5(l, v)
}
func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes6(in *jlexer.Lexer, out *PVCReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes6(out *jwriter.Writer, in PVCReference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"namespace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Namespace))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PVCReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PVCReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PVCReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PVCReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes6(l, v)
}
func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes7(in *jlexer.Lexer, out *NodeStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodeName":
			out.NodeName = string(in.String())
		case "systemContainers":
			if in.IsNull() {
				in.Skip()
				out.SystemContainers = nil
			} else {
				in.Delim('[')
				if out.SystemContainers == nil {
					if !in.IsDelim(']') {
						out.SystemContainers = make([]ContainerStats, 0, 1)
					} else {
						out.SystemContainers = []ContainerStats{}
					}
				} else {
					out.SystemContainers = (out.SystemContainers)[:0]
				}
				for !in.IsDelim(']') {
					var v10 ContainerStats
					(v10).UnmarshalEasyJSON(in)
					out.SystemContainers = append(out.SystemContainers, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cpu":
			if in.IsNull() {
				in.Skip()
				out.CPU = nil
			} else {
				if out.CPU == nil {
					out.CPU = new(CPUStats)
				}
				(*out.CPU).UnmarshalEasyJSON(in)
			}
		case "memory":
			if in.IsNull() {
				in.Skip()
				out.Memory = nil
			} else {
				if out.Memory == nil {
					out.Memory = new(MemoryStats)
				}
				(*out.Memory).UnmarshalEasyJSON(in)
			}
		case "network":
			if in.IsNull() {
				in.Skip()
				out.Network = nil
			} else {
				if out.Network == nil {
					out.Network = new(NetworkStats)
				}
				(*out.Network).UnmarshalEasyJSON(in)
			}
		case "fs":
			if in.IsNull() {
				in.Skip()
				out.Fs = nil
			} else {
				if out.Fs == nil {
					out.Fs = new(FsStats)
				}
				(*out.Fs).UnmarshalEasyJSON(in)
			}
		case "runtime":
			if in.IsNull() {
				in.Skip()
				out.Runtime = nil
			} else {
				if out.Runtime == nil {
					out.Runtime = new(RuntimeStats)
				}
				(*out.Runtime).UnmarshalEasyJSON(in)
			}
		case "rlimit":
			if in.IsNull() {
				in.Skip()
				out.Rlimit = nil
			} else {
				if out.Rlimit == nil {
					out.Rlimit = new(RlimitStats)
				}
				(*out.Rlimit).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes7(out *jwriter.Writer, in NodeStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodeName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeName))
	}
	{
		const prefix string = ",\"systemContainers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SystemContainers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.SystemContainers {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cpu\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CPU == nil {
			out.RawString("null")
		} else {
			(*in.CPU).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"memory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Memory == nil {
			out.RawString("null")
		} else {
			(*in.Memory).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"network\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Network == nil {
			out.RawString("null")
		} else {
			(*in.Network).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"fs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Fs == nil {
			out.RawString("null")
		} else {
			(*in.Fs).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"runtime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Runtime == nil {
			out.RawString("null")
		} else {
			(*in.Runtime).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"rlimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Rlimit == nil {
			out.RawString("null")
		} else {
			(*in.Rlimit).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodeStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodeStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodeStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodeStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes7(l, v)
}
func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes8(in *jlexer.Lexer, out *NetworkStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "interfaces":
			if in.IsNull() {
				in.Skip()
				out.Interfaces = nil
			} else {
				in.Delim('[')
				if out.Interfaces == nil {
					if !in.IsDelim(']') {
						out.Interfaces = make([]InterfaceStats, 0, 1)
					} else {
						out.Interfaces = []InterfaceStats{}
					}
				} else {
					out.Interfaces = (out.Interfaces)[:0]
				}
				for !in.IsDelim(']') {
					var v13 InterfaceStats
					(v13).UnmarshalEasyJSON(in)
					out.Interfaces = append(out.Interfaces, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "rxBytes":
			if in.IsNull() {
				in.Skip()
				out.RxBytes = nil
			} else {
				if out.RxBytes == nil {
					out.RxBytes = new(int64)
				}
				*out.RxBytes = int64(in.Int64())
			}
		case "rxErrors":
			if in.IsNull() {
				in.Skip()
				out.RxErrors = nil
			} else {
				if out.RxErrors == nil {
					out.RxErrors = new(int64)
				}
				*out.RxErrors = int64(in.Int64())
			}
		case "txBytes":
			if in.IsNull() {
				in.Skip()
				out.TxBytes = nil
			} else {
				if out.TxBytes == nil {
					out.TxBytes = new(int64)
				}
				*out.TxBytes = int64(in.Int64())
			}
		case "txErrors":
			if in.IsNull() {
				in.Skip()
				out.TxErrors = nil
			} else {
				if out.TxErrors == nil {
					out.TxErrors = new(int64)
				}
				*out.TxErrors = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes8(out *jwriter.Writer, in NetworkStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"interfaces\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Interfaces == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Interfaces {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"rxBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RxBytes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.RxBytes))
		}
	}
	{
		const prefix string = ",\"rxErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RxErrors == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.RxErrors))
		}
	}
	{
		const prefix string = ",\"txBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.TxBytes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.TxBytes))
		}
	}
	{
		const prefix string = ",\"txErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.TxErrors == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.TxErrors))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NetworkStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NetworkStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NetworkStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NetworkStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes8(l, v)
}
func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes9(in *jlexer.Lexer, out *MemoryStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "availableBytes":
			if in.IsNull() {
				in.Skip()
				out.AvailableBytes = nil
			} else {
				if out.AvailableBytes == nil {
					out.AvailableBytes = new(int64)
				}
				*out.AvailableBytes = int64(in.Int64())
			}
		case "usageBytes":
			if in.IsNull() {
				in.Skip()
				out.UsageBytes = nil
			} else {
				if out.UsageBytes == nil {
					out.UsageBytes = new(int64)
				}
				*out.UsageBytes = int64(in.Int64())
			}
		case "workingSetBytes":
			if in.IsNull() {
				in.Skip()
				out.WorkingSetBytes = nil
			} else {
				if out.WorkingSetBytes == nil {
					out.WorkingSetBytes = new(int64)
				}
				*out.WorkingSetBytes = int64(in.Int64())
			}
		case "rssBytes":
			if in.IsNull() {
				in.Skip()
				out.RSSBytes = nil
			} else {
				if out.RSSBytes == nil {
					out.RSSBytes = new(int64)
				}
				*out.RSSBytes = int64(in.Int64())
			}
		case "pageFaults":
			if in.IsNull() {
				in.Skip()
				out.PageFaults = nil
			} else {
				if out.PageFaults == nil {
					out.PageFaults = new(int64)
				}
				*out.PageFaults = int64(in.Int64())
			}
		case "majorPageFaults":
			if in.IsNull() {
				in.Skip()
				out.MajorPageFaults = nil
			} else {
				if out.MajorPageFaults == nil {
					out.MajorPageFaults = new(int64)
				}
				*out.MajorPageFaults = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes9(out *jwriter.Writer, in MemoryStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"availableBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AvailableBytes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.AvailableBytes))
		}
	}
	{
		const prefix string = ",\"usageBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UsageBytes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.UsageBytes))
		}
	}
	{
		const prefix string = ",\"workingSetBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.WorkingSetBytes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.WorkingSetBytes))
		}
	}
	{
		const prefix string = ",\"rssBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RSSBytes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.RSSBytes))
		}
	}
	{
		const prefix string = ",\"pageFaults\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PageFaults == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.PageFaults))
		}
	}
	{
		const prefix string = ",\"majorPageFaults\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MajorPageFaults == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.MajorPageFaults))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MemoryStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MemoryStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MemoryStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MemoryStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes9(l, v)
}
func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes10(in *jlexer.Lexer, out *InterfaceStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "rxBytes":
			if in.IsNull() {
				in.Skip()
				out.RxBytes = nil
			} else {
				if out.RxBytes == nil {
					out.RxBytes = new(int64)
				}
				*out.RxBytes = int64(in.Int64())
			}
		case "rxErrors":
			if in.IsNull() {
				in.Skip()
				out.RxErrors = nil
			} else {
				if out.RxErrors == nil {
					out.RxErrors = new(int64)
				}
				*out.RxErrors = int64(in.Int64())
			}
		case "txBytes":
			if in.IsNull() {
				in.Skip()
				out.TxBytes = nil
			} else {
				if out.TxBytes == nil {
					out.TxBytes = new(int64)
				}
				*out.TxBytes = int64(in.Int64())
			}
		case "txErrors":
			if in.IsNull() {
				in.Skip()
				out.TxErrors = nil
			} else {
				if out.TxErrors == nil {
					out.TxErrors = new(int64)
				}
				*out.TxErrors = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes10(out *jwriter.Writer, in InterfaceStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"rxBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RxBytes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.RxBytes))
		}
	}
	{
		const prefix string = ",\"rxErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RxErrors == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.RxErrors))
		}
	}
	{
		const prefix string = ",\"txBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.TxBytes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.TxBytes))
		}
	}
	{
		const prefix string = ",\"txErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.TxErrors == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.TxErrors))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InterfaceStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InterfaceStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InterfaceStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InterfaceStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes10(l, v)
}
func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes11(in *jlexer.Lexer, out *FsStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "availableBytes":
			if in.IsNull() {
				in.Skip()
				out.AvailableBytes = nil
			} else {
				if out.AvailableBytes == nil {
					out.AvailableBytes = new(int64)
				}
				*out.AvailableBytes = int64(in.Int64())
			}
		case "capacityBytes":
			if in.IsNull() {
				in.Skip()
				out.CapacityBytes = nil
			} else {
				if out.CapacityBytes == nil {
					out.CapacityBytes = new(int64)
				}
				*out.CapacityBytes = int64(in.Int64())
			}
		case "usedBytes":
			if in.IsNull() {
				in.Skip()
				out.UsedBytes = nil
			} else {
				if out.UsedBytes == nil {
					out.UsedBytes = new(int64)
				}
				*out.UsedBytes = int64(in.Int64())
			}
		case "inodesFree":
			if in.IsNull() {
				in.Skip()
				out.InodesFree = nil
			} else {
				if out.InodesFree == nil {
					out.InodesFree = new(int64)
				}
				*out.InodesFree = int64(in.Int64())
			}
		case "inodes":
			if in.IsNull() {
				in.Skip()
				out.Inodes = nil
			} else {
				if out.Inodes == nil {
					out.Inodes = new(int64)
				}
				*out.Inodes = int64(in.Int64())
			}
		case "inodesUsed":
			if in.IsNull() {
				in.Skip()
				out.InodesUsed = nil
			} else {
				if out.InodesUsed == nil {
					out.InodesUsed = new(int64)
				}
				*out.InodesUsed = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes11(out *jwriter.Writer, in FsStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"availableBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AvailableBytes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.AvailableBytes))
		}
	}
	{
		const prefix string = ",\"capacityBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CapacityBytes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.CapacityBytes))
		}
	}
	{
		const prefix string = ",\"usedBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UsedBytes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.UsedBytes))
		}
	}
	{
		const prefix string = ",\"inodesFree\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.InodesFree == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.InodesFree))
		}
	}
	{
		const prefix string = ",\"inodes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Inodes == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.Inodes))
		}
	}
	{
		const prefix string = ",\"inodesUsed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.InodesUsed == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.InodesUsed))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FsStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FsStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FsStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FsStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes11(l, v)
}
func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes12(in *jlexer.Lexer, out *ContainerStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "cpu":
			if in.IsNull() {
				in.Skip()
				out.CPU = nil
			} else {
				if out.CPU == nil {
					out.CPU = new(CPUStats)
				}
				(*out.CPU).UnmarshalEasyJSON(in)
			}
		case "memory":
			if in.IsNull() {
				in.Skip()
				out.Memory = nil
			} else {
				if out.Memory == nil {
					out.Memory = new(MemoryStats)
				}
				(*out.Memory).UnmarshalEasyJSON(in)
			}
		case "accelerator":
			if in.IsNull() {
				in.Skip()
				out.Accelerators = nil
			} else {
				in.Delim('[')
				if out.Accelerators == nil {
					if !in.IsDelim(']') {
						out.Accelerators = make([]AcceleratorStats, 0, 1)
					} else {
						out.Accelerators = []AcceleratorStats{}
					}
				} else {
					out.Accelerators = (out.Accelerators)[:0]
				}
				for !in.IsDelim(']') {
					var v16 AcceleratorStats
					(v16).UnmarshalEasyJSON(in)
					out.Accelerators = append(out.Accelerators, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rootfs":
			if in.IsNull() {
				in.Skip()
				out.Rootfs = nil
			} else {
				if out.Rootfs == nil {
					out.Rootfs = new(FsStats)
				}
				(*out.Rootfs).UnmarshalEasyJSON(in)
			}
		case "logs":
			if in.IsNull() {
				in.Skip()
				out.Logs = nil
			} else {
				if out.Logs == nil {
					out.Logs = new(FsStats)
				}
				(*out.Logs).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes12(out *jwriter.Writer, in ContainerStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"cpu\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CPU == nil {
			out.RawString("null")
		} else {
			(*in.CPU).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"memory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Memory == nil {
			out.RawString("null")
		} else {
			(*in.Memory).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"accelerator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Accelerators == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Accelerators {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"rootfs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Rootfs == nil {
			out.RawString("null")
		} else {
			(*in.Rootfs).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"logs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Logs == nil {
			out.RawString("null")
		} else {
			(*in.Logs).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContainerStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContainerStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContainerStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContainerStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes12(l, v)
}
func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes13(in *jlexer.Lexer, out *CPUStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "usageNanoCores":
			if in.IsNull() {
				in.Skip()
				out.UsageNanoCores = nil
			} else {
				if out.UsageNanoCores == nil {
					out.UsageNanoCores = new(int64)
				}
				*out.UsageNanoCores = int64(in.Int64())
			}
		case "usageCoreNanoSeconds":
			if in.IsNull() {
				in.Skip()
				out.UsageCoreNanoSeconds = nil
			} else {
				if out.UsageCoreNanoSeconds == nil {
					out.UsageCoreNanoSeconds = new(int64)
				}
				*out.UsageCoreNanoSeconds = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes13(out *jwriter.Writer, in CPUStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"usageNanoCores\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UsageNanoCores == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.UsageNanoCores))
		}
	}
	{
		const prefix string = ",\"usageCoreNanoSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UsageCoreNanoSeconds == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.UsageCoreNanoSeconds))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CPUStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CPUStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CPUStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CPUStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes13(l, v)
}
func easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes14(in *jlexer.Lexer, out *AcceleratorStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "make":
			out.Make = string(in.String())
		case "model":
			out.Model = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "memoryTotal":
			out.MemoryTotal = int64(in.Int64())
		case "memoryUsed":
			out.MemoryUsed = int64(in.Int64())
		case "dutyCycle":
			out.DutyCycle = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes14(out *jwriter.Writer, in AcceleratorStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"make\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Make))
	}
	{
		const prefix string = ",\"model\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Model))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"memoryTotal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MemoryTotal))
	}
	{
		const prefix string = ",\"memoryUsed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MemoryUsed))
	}
	{
		const prefix string = ",\"dutyCycle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DutyCycle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AcceleratorStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AcceleratorStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComNetdataGoDPluginModulesKubernetes14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AcceleratorStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AcceleratorStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComNetdataGoDPluginModulesKubernetes14(l, v)
}
